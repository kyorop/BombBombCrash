#include "EnemyAI.h"
#include "MapState.h"
#include "Enemy.h"
#include "Dijkstra.h"
#include "Search.h"
#include "Route.h"
#include "Target.h"
#include "Avoid.h"
#include "StopRoute.h"
#include "GameConstant.h"
#include "DangerState.h"
#include "State.h"
#include "AttackOtherCharacter.h"
#include "BreakBlock.h"
#include "DxLib.h"


EnemyAI::EnemyAI()
	:nextState(IStateChanger::NOCHAGE),
	state(new BreakBlock(this))
{
}

EnemyAI::~EnemyAI(void)
{
	delete state;
}


void EnemyAI::UpdateState()
{
	if(nextState != IStateChanger::NOCHAGE)
	{
		delete state;
		switch(nextState)
		{
		case IStateChanger::ATTACK:
			state = new AttackOtherCharacter(this);
			break;
		case IStateChanger::AVOID:
			state =new Avoid(this);
			break;
		case IStateChanger::BREAKBLOCK:
			state = new BreakBlock(this);
			break;
		}
		nextState = IStateChanger::NOCHAGE;
	}
}


void EnemyAI::ChangeState(int next)
{
	nextState = next;
}

void EnemyAI::Analyse(const Enemy &myself)
{
<<<<<<< HEAD
	UpdateState();
	state->Analyse(myself);
=======
	int x_center = (myself.GetX()*2 + 32) / 2;
	int y_center = (myself.GetY()*2 + 32) / 2;

	//ちょうどマスぴったりにいるときに
	if(myself.GetX() % 32 == 0 && myself.GetY() % 32 == 0)
	{	
		if(CheckDanager(myself) == 1)
		{
			if(currentState != AVOID)
			{
				route = avoid;	//危険地にいるなら逃げる
				nextState = AVOID;
			}
		}
		else if(search->CheckInClosedInterval(y_center/32, x_center/32) == 1 && DangerState::GetInstance()->GetDangerState(y_center/32, x_center/32) == 0)
		{
			if(currentState != STOPTHINKING)
			{
				route = stop;	//閉区間にいるならストップ
				nextState = STOPTHINKING;
			}
		}
		else
		{ 
			if(currentState != TARGET)
			{
				route = target;	//どれでもないならターゲットを狙う
				nextState = TARGET;
			}
		}
	}

	//nextstateがcurrentstateと同じ時は切り替えをしない(今の思考状態でいたい)
	//違うときはnextstateがセットされたということだから、切り替えてほしいということと同値
	if(nextState != currentState)
	{
		currentState = nextState;
		route->DecideGoal(myself);
		route->SetRoute(myself);	
	}
>>>>>>> fix_player_image_bug
}

int EnemyAI::GetAction(const Enemy &myself)
{
	return state->GetRoute(myself);
}


